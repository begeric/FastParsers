{
  class fresh$macro$321 extends AnyRef with fastparsers.framework.ruleprocessing.FinalFastParserImpl {
    def <init>(): fresh$macro$321 = {
      fresh$macro$321.super.<init>();
      ()
    };
    import scala.collection.mutable.ListBuffer;
    import scala.reflect.runtime.`package`.universe._;
    def member: fastparsers.parsers.Parser[Any] = scala.this.Predef.???;
    def arr: fastparsers.parsers.Parser[Any] = scala.this.Predef.???;
    def value: fastparsers.parsers.Parser[Any] = scala.this.Predef.???;
    def obj: fastparsers.parsers.Parser[Any] = scala.this.Predef.???;
    def member(input$macro$1: Array[Char], fresh$macro$5: Int = 0): fastparsers.framework.parseresult.ParseResult[Any,String] = {
      var error: String = " ";
      {
        var inputpos$macro$2: Int = fresh$macro$5;
        val inputsize$macro$3: Int = scala.this.Predef.charArrayOps(input$macro$1).size;
        {
          val inputpositioned$macro$4: fastparsers.tools.ToPosition.IndexedCharSeqToPosition[scala.collection.mutable.WrappedArray[Char]] = new fastparsers.tools.ToPosition.IndexedCharSeqToPosition[scala.collection.mutable.WrappedArray[Char]](scala.this.Predef.wrapCharArray(input$macro$1));
          {
            var success: Boolean = false;
            var fresh$macro$8: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$15: Any = null;
            var fresh$macro$17: Any = null;
            var fresh$macro$19: Any = null;
            var fresh$macro$21: Any = null;
            var fresh$macro$23: Any = null;
            var fresh$macro$25: Any = null;
            var fresh$macro$29: List[Any] = immutable.this.Nil;
            var fresh$macro$35: Array[Char] = null;
            var fresh$macro$38: Any = null;
            var fresh$macro$43: Any = null;
            var fresh$macro$46: List[Any] = immutable.this.Nil;
            var fresh$macro$52: Array[Char] = null;
            var fresh$macro$55: Any = null;
            var fresh$macro$60: Any = null;
            var fresh$macro$63: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$66: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$72: Array[Char] = null;
            var fresh$macro$77: Array[Char] = null;
            var fresh$macro$82: Array[Char] = null;
            var fresh$macro$83: Any = null;
            {
              {
                val fresh$macro$7: Int = inputpos$macro$2;
                {
                  while$2(){
                    if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                      {
                        inputpos$macro$2 = inputpos$macro$2.+(1);
                        while$2()
                      }
                    else
                      ()
                  };
                  val fresh$macro$6: Int = inputpos$macro$2;
                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('\"')))
                    {
                      inputpos$macro$2 = inputpos$macro$2.+(1);
                      while$1(){
                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).!=('\"')))
                          {
                            {
                              if (input$macro$1.apply(inputpos$macro$2).==('\\'))
                                inputpos$macro$2 = inputpos$macro$2.+(1)
                              else
                                ();
                              inputpos$macro$2 = inputpos$macro$2.+(1)
                            };
                            while$1()
                          }
                        else
                          ()
                      };
                      if (inputpos$macro$2.<(inputsize$macro$3))
                        {
                          success = true;
                          inputpos$macro$2 = inputpos$macro$2.+(1);
                          fresh$macro$8 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$6, inputpos$macro$2)
                        }
                      else
                        {
                          success = false;
                          ();
                          inputpos$macro$2 = fresh$macro$7
                        }
                    }
                  else
                    {
                      success = false;
                      ();
                      inputpos$macro$2 = fresh$macro$7
                    }
                }
              };
              if (success)
                {
                  {
                    val fresh$macro$12: Int = inputpos$macro$2;
                    {
                      var fresh$macro$11: Int = 0;
                      val fresh$macro$10: Int = JSonImpl2.this.points.length;
                      while$4(){
                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                          {
                            inputpos$macro$2 = inputpos$macro$2.+(1);
                            while$4()
                          }
                        else
                          ()
                      };
                      while$3(){
                        if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$11.<(fresh$macro$10)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.points).charAt(fresh$macro$11))))
                          {
                            {
                              fresh$macro$11 = fresh$macro$11.+(1);
                              inputpos$macro$2 = inputpos$macro$2.+(1)
                            };
                            while$3()
                          }
                        else
                          ()
                      };
                      if (fresh$macro$11.==(fresh$macro$10))
                        {
                          success = true;
                          ()
                        }
                      else
                        {
                          success = false;
                          ();
                          inputpos$macro$2 = fresh$macro$12
                        }
                    }
                  };
                  if (success)
                    {
                      {
                        {
                          val fresh$macro$13: Int = inputpos$macro$2;
                          while$5(){
                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                              {
                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                while$5()
                              }
                            else
                              ()
                          };
                          ();
                          success = true
                        };
                        if (success)
                          {
                            val fresh$macro$16: Int = inputpos$macro$2;
                            {
                              {
                                val fresh$macro$18: Int = inputpos$macro$2;
                                {
                                  {
                                    val fresh$macro$20: Int = inputpos$macro$2;
                                    {
                                      {
                                        val fresh$macro$22: Int = inputpos$macro$2;
                                        {
                                          {
                                            val fresh$macro$24: Int = inputpos$macro$2;
                                            {
                                              {
                                                val fresh$macro$26: Int = inputpos$macro$2;
                                                {
                                                  {
                                                    {
                                                      {
                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('{')))
                                                          {
                                                            ();
                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                            success = true
                                                          }
                                                        else
                                                          {
                                                            success = false;
                                                            ()
                                                          };
                                                        if (success)
                                                          {
                                                            var fresh$macro$27: Boolean = true;
                                                            val fresh$macro$28: scala.collection.mutable.ListBuffer[Any] = new scala.collection.mutable.ListBuffer[Any]();
                                                            while$8(){
                                                              if (fresh$macro$27)
                                                                {
                                                                  {
                                                                    val fresh$macro$36: Int = inputpos$macro$2;
                                                                    {
                                                                      {
                                                                        val fresh$macro$37: fastparsers.framework.parseresult.ParseResult[Any,String] = fresh$macro$321.this.member(input$macro$1, inputpos$macro$2);
                                                                        success = fresh$macro$37.success;
                                                                        if (success)
                                                                          {
                                                                            inputpos$macro$2 = fresh$macro$37.inputPos;
                                                                            fresh$macro$38 = fresh$macro$37.result
                                                                          }
                                                                        else
                                                                          error = fresh$macro$37.error
                                                                      };
                                                                      if (success)
                                                                        {
                                                                          fresh$macro$28.append(fresh$macro$38);
                                                                          {
                                                                            val fresh$macro$30: Int = inputpos$macro$2;
                                                                            {
                                                                              {
                                                                                val fresh$macro$34: Int = inputpos$macro$2;
                                                                                {
                                                                                  var fresh$macro$33: Int = 0;
                                                                                  val fresh$macro$32: Int = JSonImpl2.this.comma.length;
                                                                                  while$7(){
                                                                                    if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                                      {
                                                                                        inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                        while$7()
                                                                                      }
                                                                                    else
                                                                                      ()
                                                                                  };
                                                                                  while$6(){
                                                                                    if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$33.<(fresh$macro$32)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.comma).charAt(fresh$macro$33))))
                                                                                      {
                                                                                        {
                                                                                          fresh$macro$33 = fresh$macro$33.+(1);
                                                                                          inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                        };
                                                                                        while$6()
                                                                                      }
                                                                                    else
                                                                                      ()
                                                                                  };
                                                                                  if (fresh$macro$33.==(fresh$macro$32))
                                                                                    {
                                                                                      success = true;
                                                                                      fresh$macro$35 = JSonImpl2.this.comma
                                                                                    }
                                                                                  else
                                                                                    {
                                                                                      success = false;
                                                                                      ();
                                                                                      inputpos$macro$2 = fresh$macro$34
                                                                                    }
                                                                                }
                                                                              };
                                                                              if (success.unary_!)
                                                                                {
                                                                                  fresh$macro$27 = false;
                                                                                  inputpos$macro$2 = fresh$macro$30
                                                                                }
                                                                              else
                                                                                ()
                                                                            }
                                                                          }
                                                                        }
                                                                      else
                                                                        {
                                                                          fresh$macro$27 = false;
                                                                          inputpos$macro$2 = fresh$macro$36
                                                                        }
                                                                    }
                                                                  };
                                                                  while$8()
                                                                }
                                                              else
                                                                ()
                                                            };
                                                            {
                                                              fresh$macro$29 = fresh$macro$28.toList;
                                                              success = true
                                                            }
                                                          }
                                                        else
                                                          ()
                                                      };
                                                      if (success)
                                                        {
                                                          val fresh$macro$42: Int = inputpos$macro$2;
                                                          {
                                                            var fresh$macro$41: Int = 0;
                                                            val fresh$macro$40: Int = JSonImpl2.this.closeBracket.length;
                                                            while$10(){
                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                {
                                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                  while$10()
                                                                }
                                                              else
                                                                ()
                                                            };
                                                            while$9(){
                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$41.<(fresh$macro$40)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.closeBracket).charAt(fresh$macro$41))))
                                                                {
                                                                  {
                                                                    fresh$macro$41 = fresh$macro$41.+(1);
                                                                    inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                  };
                                                                  while$9()
                                                                }
                                                              else
                                                                ()
                                                            };
                                                            if (fresh$macro$41.==(fresh$macro$40))
                                                              {
                                                                success = true;
                                                                ()
                                                              }
                                                            else
                                                              {
                                                                success = false;
                                                                ();
                                                                inputpos$macro$2 = fresh$macro$42
                                                              }
                                                          }
                                                        }
                                                      else
                                                        ()
                                                    };
                                                    fresh$macro$43 = fresh$macro$29
                                                  };
                                                  if (success.unary_!)
                                                    {
                                                      inputpos$macro$2 = fresh$macro$26;
                                                      {
                                                        {
                                                          {
                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('[')))
                                                              {
                                                                ();
                                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                success = true
                                                              }
                                                            else
                                                              {
                                                                success = false;
                                                                ()
                                                              };
                                                            if (success)
                                                              {
                                                                var fresh$macro$44: Boolean = true;
                                                                val fresh$macro$45: scala.collection.mutable.ListBuffer[Any] = new scala.collection.mutable.ListBuffer[Any]();
                                                                while$13(){
                                                                  if (fresh$macro$44)
                                                                    {
                                                                      {
                                                                        val fresh$macro$53: Int = inputpos$macro$2;
                                                                        {
                                                                          {
                                                                            val fresh$macro$54: fastparsers.framework.parseresult.ParseResult[Any,String] = fresh$macro$321.this.value(input$macro$1, inputpos$macro$2);
                                                                            success = fresh$macro$54.success;
                                                                            if (success)
                                                                              {
                                                                                inputpos$macro$2 = fresh$macro$54.inputPos;
                                                                                fresh$macro$55 = fresh$macro$54.result
                                                                              }
                                                                            else
                                                                              error = fresh$macro$54.error
                                                                          };
                                                                          if (success)
                                                                            {
                                                                              fresh$macro$45.append(fresh$macro$55);
                                                                              {
                                                                                val fresh$macro$47: Int = inputpos$macro$2;
                                                                                {
                                                                                  {
                                                                                    val fresh$macro$51: Int = inputpos$macro$2;
                                                                                    {
                                                                                      var fresh$macro$50: Int = 0;
                                                                                      val fresh$macro$49: Int = JSonImpl2.this.comma.length;
                                                                                      while$12(){
                                                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                                          {
                                                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                            while$12()
                                                                                          }
                                                                                        else
                                                                                          ()
                                                                                      };
                                                                                      while$11(){
                                                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$50.<(fresh$macro$49)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.comma).charAt(fresh$macro$50))))
                                                                                          {
                                                                                            {
                                                                                              fresh$macro$50 = fresh$macro$50.+(1);
                                                                                              inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                            };
                                                                                            while$11()
                                                                                          }
                                                                                        else
                                                                                          ()
                                                                                      };
                                                                                      if (fresh$macro$50.==(fresh$macro$49))
                                                                                        {
                                                                                          success = true;
                                                                                          fresh$macro$52 = JSonImpl2.this.comma
                                                                                        }
                                                                                      else
                                                                                        {
                                                                                          success = false;
                                                                                          ();
                                                                                          inputpos$macro$2 = fresh$macro$51
                                                                                        }
                                                                                    }
                                                                                  };
                                                                                  if (success.unary_!)
                                                                                    {
                                                                                      fresh$macro$44 = false;
                                                                                      inputpos$macro$2 = fresh$macro$47
                                                                                    }
                                                                                  else
                                                                                    ()
                                                                                }
                                                                              }
                                                                            }
                                                                          else
                                                                            {
                                                                              fresh$macro$44 = false;
                                                                              inputpos$macro$2 = fresh$macro$53
                                                                            }
                                                                        }
                                                                      };
                                                                      while$13()
                                                                    }
                                                                  else
                                                                    ()
                                                                };
                                                                {
                                                                  fresh$macro$46 = fresh$macro$45.toList;
                                                                  success = true
                                                                }
                                                              }
                                                            else
                                                              ()
                                                          };
                                                          if (success)
                                                            {
                                                              val fresh$macro$59: Int = inputpos$macro$2;
                                                              {
                                                                var fresh$macro$58: Int = 0;
                                                                val fresh$macro$57: Int = JSonImpl2.this.closeSBracket.length;
                                                                while$15(){
                                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                    {
                                                                      inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                      while$15()
                                                                    }
                                                                  else
                                                                    ()
                                                                };
                                                                while$14(){
                                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$58.<(fresh$macro$57)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.closeSBracket).charAt(fresh$macro$58))))
                                                                    {
                                                                      {
                                                                        fresh$macro$58 = fresh$macro$58.+(1);
                                                                        inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                      };
                                                                      while$14()
                                                                    }
                                                                  else
                                                                    ()
                                                                };
                                                                if (fresh$macro$58.==(fresh$macro$57))
                                                                  {
                                                                    success = true;
                                                                    ()
                                                                  }
                                                                else
                                                                  {
                                                                    success = false;
                                                                    ();
                                                                    inputpos$macro$2 = fresh$macro$59
                                                                  }
                                                              }
                                                            }
                                                          else
                                                            ()
                                                        };
                                                        fresh$macro$60 = fresh$macro$46
                                                      };
                                                      if (success)
                                                        fresh$macro$25 = fresh$macro$60
                                                      else
                                                        ()
                                                    }
                                                  else
                                                    fresh$macro$25 = fresh$macro$43
                                                }
                                              };
                                              if (success.unary_!)
                                                {
                                                  inputpos$macro$2 = fresh$macro$24;
                                                  {
                                                    val fresh$macro$62: Int = inputpos$macro$2;
                                                    {
                                                      while$17(){
                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                          {
                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                            while$17()
                                                          }
                                                        else
                                                          ()
                                                      };
                                                      val fresh$macro$61: Int = inputpos$macro$2;
                                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('\"')))
                                                        {
                                                          inputpos$macro$2 = inputpos$macro$2.+(1);
                                                          while$16(){
                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).!=('\"')))
                                                              {
                                                                {
                                                                  if (input$macro$1.apply(inputpos$macro$2).==('\\'))
                                                                    inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                  else
                                                                    ();
                                                                  inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                };
                                                                while$16()
                                                              }
                                                            else
                                                              ()
                                                          };
                                                          if (inputpos$macro$2.<(inputsize$macro$3))
                                                            {
                                                              success = true;
                                                              inputpos$macro$2 = inputpos$macro$2.+(1);
                                                              fresh$macro$63 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$61, inputpos$macro$2)
                                                            }
                                                          else
                                                            {
                                                              success = false;
                                                              ();
                                                              inputpos$macro$2 = fresh$macro$62
                                                            }
                                                        }
                                                      else
                                                        {
                                                          success = false;
                                                          ();
                                                          inputpos$macro$2 = fresh$macro$62
                                                        }
                                                    }
                                                  };
                                                  if (success)
                                                    fresh$macro$23 = fresh$macro$63
                                                  else
                                                    ()
                                                }
                                              else
                                                fresh$macro$23 = fresh$macro$25
                                            }
                                          };
                                          if (success.unary_!)
                                            {
                                              inputpos$macro$2 = fresh$macro$22;
                                              {
                                                val fresh$macro$67: Int = inputpos$macro$2;
                                                {
                                                  while$21(){
                                                    if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                      {
                                                        inputpos$macro$2 = inputpos$macro$2.+(1);
                                                        while$21()
                                                      }
                                                    else
                                                      ()
                                                  };
                                                  var fresh$macro$64: Boolean = false;
                                                  val fresh$macro$65: Int = inputpos$macro$2;
                                                  success = false;
                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('-')))
                                                    inputpos$macro$2 = inputpos$macro$2.+(1)
                                                  else
                                                    ();
                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                    {
                                                      inputpos$macro$2 = inputpos$macro$2.+(1);
                                                      while$20(){
                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                          {
                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                            while$20()
                                                          }
                                                        else
                                                          ()
                                                      };
                                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('.')))
                                                        {
                                                          inputpos$macro$2 = inputpos$macro$2.+(1);
                                                          while$18(){
                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                              {
                                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                while$18()
                                                              }
                                                            else
                                                              ()
                                                          }
                                                        }
                                                      else
                                                        ();
                                                      success = true;
                                                      fresh$macro$66 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$65, inputpos$macro$2)
                                                    }
                                                  else
                                                    if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('.')))
                                                      {
                                                        inputpos$macro$2 = inputpos$macro$2.+(1);
                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                          {
                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                            while$19(){
                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                                {
                                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                  while$19()
                                                                }
                                                              else
                                                                ()
                                                            };
                                                            success = true;
                                                            fresh$macro$66 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$65, inputpos$macro$2)
                                                          }
                                                        else
                                                          ()
                                                      }
                                                    else
                                                      ()
                                                }
                                              };
                                              if (success)
                                                fresh$macro$21 = fresh$macro$66
                                              else
                                                ()
                                            }
                                          else
                                            fresh$macro$21 = fresh$macro$23
                                        }
                                      };
                                      if (success.unary_!)
                                        {
                                          inputpos$macro$2 = fresh$macro$20;
                                          {
                                            val fresh$macro$71: Int = inputpos$macro$2;
                                            {
                                              var fresh$macro$70: Int = 0;
                                              val fresh$macro$69: Int = JSonImpl2.this.nullValue.length;
                                              while$23(){
                                                if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                  {
                                                    inputpos$macro$2 = inputpos$macro$2.+(1);
                                                    while$23()
                                                  }
                                                else
                                                  ()
                                              };
                                              while$22(){
                                                if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$70.<(fresh$macro$69)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.nullValue).charAt(fresh$macro$70))))
                                                  {
                                                    {
                                                      fresh$macro$70 = fresh$macro$70.+(1);
                                                      inputpos$macro$2 = inputpos$macro$2.+(1)
                                                    };
                                                    while$22()
                                                  }
                                                else
                                                  ()
                                              };
                                              if (fresh$macro$70.==(fresh$macro$69))
                                                {
                                                  success = true;
                                                  fresh$macro$72 = JSonImpl2.this.nullValue
                                                }
                                              else
                                                {
                                                  success = false;
                                                  ();
                                                  inputpos$macro$2 = fresh$macro$71
                                                }
                                            }
                                          };
                                          if (success)
                                            fresh$macro$19 = fresh$macro$72
                                          else
                                            ()
                                        }
                                      else
                                        fresh$macro$19 = fresh$macro$21
                                    }
                                  };
                                  if (success.unary_!)
                                    {
                                      inputpos$macro$2 = fresh$macro$18;
                                      {
                                        val fresh$macro$76: Int = inputpos$macro$2;
                                        {
                                          var fresh$macro$75: Int = 0;
                                          val fresh$macro$74: Int = JSonImpl2.this.trueValue.length;
                                          while$25(){
                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                              {
                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                while$25()
                                              }
                                            else
                                              ()
                                          };
                                          while$24(){
                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$75.<(fresh$macro$74)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.trueValue).charAt(fresh$macro$75))))
                                              {
                                                {
                                                  fresh$macro$75 = fresh$macro$75.+(1);
                                                  inputpos$macro$2 = inputpos$macro$2.+(1)
                                                };
                                                while$24()
                                              }
                                            else
                                              ()
                                          };
                                          if (fresh$macro$75.==(fresh$macro$74))
                                            {
                                              success = true;
                                              fresh$macro$77 = JSonImpl2.this.trueValue
                                            }
                                          else
                                            {
                                              success = false;
                                              ();
                                              inputpos$macro$2 = fresh$macro$76
                                            }
                                        }
                                      };
                                      if (success)
                                        fresh$macro$17 = fresh$macro$77
                                      else
                                        ()
                                    }
                                  else
                                    fresh$macro$17 = fresh$macro$19
                                }
                              };
                              if (success.unary_!)
                                {
                                  inputpos$macro$2 = fresh$macro$16;
                                  {
                                    val fresh$macro$81: Int = inputpos$macro$2;
                                    {
                                      var fresh$macro$80: Int = 0;
                                      val fresh$macro$79: Int = JSonImpl2.this.falseValue.length;
                                      while$27(){
                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                          {
                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                            while$27()
                                          }
                                        else
                                          ()
                                      };
                                      while$26(){
                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$80.<(fresh$macro$79)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.falseValue).charAt(fresh$macro$80))))
                                          {
                                            {
                                              fresh$macro$80 = fresh$macro$80.+(1);
                                              inputpos$macro$2 = inputpos$macro$2.+(1)
                                            };
                                            while$26()
                                          }
                                        else
                                          ()
                                      };
                                      if (fresh$macro$80.==(fresh$macro$79))
                                        {
                                          success = true;
                                          fresh$macro$82 = JSonImpl2.this.falseValue
                                        }
                                      else
                                        {
                                          success = false;
                                          ();
                                          inputpos$macro$2 = fresh$macro$81
                                        }
                                    }
                                  };
                                  if (success)
                                    fresh$macro$15 = fresh$macro$82
                                  else
                                    ()
                                }
                              else
                                fresh$macro$15 = fresh$macro$17
                            }
                          }
                        else
                          ()
                      };
                      fresh$macro$83 = fresh$macro$15
                    }
                  else
                    ()
                }
              else
                ()
            };
            fastparsers.framework.parseresult.ParseResult.apply[Any, String](success, error, if (success)
              scala.Tuple2.apply[fastparsers.input.InputWindow.CharArrayStruct, Any](fresh$macro$8, fresh$macro$83)
            else
              null, inputpos$macro$2)
          }
        }
      }
    };
    <synthetic> def member$default$2: Int = 0;
    def arr(input$macro$1: Array[Char], fresh$macro$84: Int = 0): fastparsers.framework.parseresult.ParseResult[Any,String] = {
      var error: String = " ";
      {
        var inputpos$macro$2: Int = fresh$macro$84;
        val inputsize$macro$3: Int = scala.this.Predef.charArrayOps(input$macro$1).size;
        {
          val inputpositioned$macro$4: fastparsers.tools.ToPosition.IndexedCharSeqToPosition[scala.collection.mutable.WrappedArray[Char]] = new fastparsers.tools.ToPosition.IndexedCharSeqToPosition[scala.collection.mutable.WrappedArray[Char]](scala.this.Predef.wrapCharArray(input$macro$1));
          {
            var success: Boolean = false;
            var fresh$macro$87: List[Any] = immutable.this.Nil;
            var fresh$macro$93: Array[Char] = null;
            var fresh$macro$97: Any = null;
            var fresh$macro$99: Any = null;
            var fresh$macro$101: Any = null;
            var fresh$macro$103: Any = null;
            var fresh$macro$105: Any = null;
            var fresh$macro$107: Any = null;
            var fresh$macro$111: List[Any] = immutable.this.Nil;
            var fresh$macro$117: Array[Char] = null;
            var fresh$macro$121: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$127: Any = null;
            var fresh$macro$128: Any = null;
            var fresh$macro$133: Any = null;
            var fresh$macro$135: Any = null;
            var fresh$macro$138: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$141: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$147: Array[Char] = null;
            var fresh$macro$152: Array[Char] = null;
            var fresh$macro$157: Array[Char] = null;
            var fresh$macro$158: Any = null;
            {
              {
                if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('[')))
                  {
                    ();
                    inputpos$macro$2 = inputpos$macro$2.+(1);
                    success = true
                  }
                else
                  {
                    success = false;
                    ()
                  };
                if (success)
                  {
                    var fresh$macro$85: Boolean = true;
                    val fresh$macro$86: scala.collection.mutable.ListBuffer[Any] = new scala.collection.mutable.ListBuffer[Any]();
                    while$52(){
                      if (fresh$macro$85)
                        {
                          {
                            val fresh$macro$94: Int = inputpos$macro$2;
                            {
                              {
                                {
                                  {
                                    val fresh$macro$95: Int = inputpos$macro$2;
                                    while$30(){
                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                        {
                                          inputpos$macro$2 = inputpos$macro$2.+(1);
                                          while$30()
                                        }
                                      else
                                        ()
                                    };
                                    ();
                                    success = true
                                  };
                                  if (success)
                                    {
                                      val fresh$macro$98: Int = inputpos$macro$2;
                                      {
                                        {
                                          val fresh$macro$100: Int = inputpos$macro$2;
                                          {
                                            {
                                              val fresh$macro$102: Int = inputpos$macro$2;
                                              {
                                                {
                                                  val fresh$macro$104: Int = inputpos$macro$2;
                                                  {
                                                    {
                                                      val fresh$macro$106: Int = inputpos$macro$2;
                                                      {
                                                        {
                                                          val fresh$macro$108: Int = inputpos$macro$2;
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('{')))
                                                                    {
                                                                      ();
                                                                      inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                      success = true
                                                                    }
                                                                  else
                                                                    {
                                                                      success = false;
                                                                      ()
                                                                    };
                                                                  if (success)
                                                                    {
                                                                      var fresh$macro$109: Boolean = true;
                                                                      val fresh$macro$110: scala.collection.mutable.ListBuffer[Any] = new scala.collection.mutable.ListBuffer[Any]();
                                                                      while$37(){
                                                                        if (fresh$macro$109)
                                                                          {
                                                                            {
                                                                              val fresh$macro$118: Int = inputpos$macro$2;
                                                                              {
                                                                                {
                                                                                  {
                                                                                    {
                                                                                      val fresh$macro$120: Int = inputpos$macro$2;
                                                                                      {
                                                                                        while$34(){
                                                                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                                            {
                                                                                              inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                              while$34()
                                                                                            }
                                                                                          else
                                                                                            ()
                                                                                        };
                                                                                        val fresh$macro$119: Int = inputpos$macro$2;
                                                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('\"')))
                                                                                          {
                                                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                            while$33(){
                                                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).!=('\"')))
                                                                                                {
                                                                                                  {
                                                                                                    if (input$macro$1.apply(inputpos$macro$2).==('\\'))
                                                                                                      inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                                    else
                                                                                                      ();
                                                                                                    inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                                  };
                                                                                                  while$33()
                                                                                                }
                                                                                              else
                                                                                                ()
                                                                                            };
                                                                                            if (inputpos$macro$2.<(inputsize$macro$3))
                                                                                              {
                                                                                                success = true;
                                                                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                                fresh$macro$121 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$119, inputpos$macro$2)
                                                                                              }
                                                                                            else
                                                                                              {
                                                                                                success = false;
                                                                                                ();
                                                                                                inputpos$macro$2 = fresh$macro$120
                                                                                              }
                                                                                          }
                                                                                        else
                                                                                          {
                                                                                            success = false;
                                                                                            ();
                                                                                            inputpos$macro$2 = fresh$macro$120
                                                                                          }
                                                                                      }
                                                                                    };
                                                                                    if (success)
                                                                                      {
                                                                                        {
                                                                                          val fresh$macro$125: Int = inputpos$macro$2;
                                                                                          {
                                                                                            var fresh$macro$124: Int = 0;
                                                                                            val fresh$macro$123: Int = JSonImpl2.this.points.length;
                                                                                            while$36(){
                                                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                                                {
                                                                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                                  while$36()
                                                                                                }
                                                                                              else
                                                                                                ()
                                                                                            };
                                                                                            while$35(){
                                                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$124.<(fresh$macro$123)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.points).charAt(fresh$macro$124))))
                                                                                                {
                                                                                                  {
                                                                                                    fresh$macro$124 = fresh$macro$124.+(1);
                                                                                                    inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                                  };
                                                                                                  while$35()
                                                                                                }
                                                                                              else
                                                                                                ()
                                                                                            };
                                                                                            if (fresh$macro$124.==(fresh$macro$123))
                                                                                              {
                                                                                                success = true;
                                                                                                ()
                                                                                              }
                                                                                            else
                                                                                              {
                                                                                                success = false;
                                                                                                ();
                                                                                                inputpos$macro$2 = fresh$macro$125
                                                                                              }
                                                                                          }
                                                                                        };
                                                                                        if (success)
                                                                                          {
                                                                                            val fresh$macro$126: fastparsers.framework.parseresult.ParseResult[Any,String] = fresh$macro$321.this.value(input$macro$1, inputpos$macro$2);
                                                                                            success = fresh$macro$126.success;
                                                                                            if (success)
                                                                                              {
                                                                                                inputpos$macro$2 = fresh$macro$126.inputPos;
                                                                                                fresh$macro$127 = fresh$macro$126.result
                                                                                              }
                                                                                            else
                                                                                              error = fresh$macro$126.error
                                                                                          }
                                                                                        else
                                                                                          ()
                                                                                      }
                                                                                    else
                                                                                      ()
                                                                                  };
                                                                                  fresh$macro$128 = scala.Tuple2.apply[fastparsers.input.InputWindow.CharArrayStruct, Any](fresh$macro$121, fresh$macro$127)
                                                                                };
                                                                                if (success)
                                                                                  {
                                                                                    fresh$macro$110.append(fresh$macro$128);
                                                                                    {
                                                                                      val fresh$macro$112: Int = inputpos$macro$2;
                                                                                      {
                                                                                        {
                                                                                          val fresh$macro$116: Int = inputpos$macro$2;
                                                                                          {
                                                                                            var fresh$macro$115: Int = 0;
                                                                                            val fresh$macro$114: Int = JSonImpl2.this.comma.length;
                                                                                            while$32(){
                                                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                                                {
                                                                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                                  while$32()
                                                                                                }
                                                                                              else
                                                                                                ()
                                                                                            };
                                                                                            while$31(){
                                                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$115.<(fresh$macro$114)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.comma).charAt(fresh$macro$115))))
                                                                                                {
                                                                                                  {
                                                                                                    fresh$macro$115 = fresh$macro$115.+(1);
                                                                                                    inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                                  };
                                                                                                  while$31()
                                                                                                }
                                                                                              else
                                                                                                ()
                                                                                            };
                                                                                            if (fresh$macro$115.==(fresh$macro$114))
                                                                                              {
                                                                                                success = true;
                                                                                                fresh$macro$117 = JSonImpl2.this.comma
                                                                                              }
                                                                                            else
                                                                                              {
                                                                                                success = false;
                                                                                                ();
                                                                                                inputpos$macro$2 = fresh$macro$116
                                                                                              }
                                                                                          }
                                                                                        };
                                                                                        if (success.unary_!)
                                                                                          {
                                                                                            fresh$macro$109 = false;
                                                                                            inputpos$macro$2 = fresh$macro$112
                                                                                          }
                                                                                        else
                                                                                          ()
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                else
                                                                                  {
                                                                                    fresh$macro$109 = false;
                                                                                    inputpos$macro$2 = fresh$macro$118
                                                                                  }
                                                                              }
                                                                            };
                                                                            while$37()
                                                                          }
                                                                        else
                                                                          ()
                                                                      };
                                                                      {
                                                                        fresh$macro$111 = fresh$macro$110.toList;
                                                                        success = true
                                                                      }
                                                                    }
                                                                  else
                                                                    ()
                                                                };
                                                                if (success)
                                                                  {
                                                                    val fresh$macro$132: Int = inputpos$macro$2;
                                                                    {
                                                                      var fresh$macro$131: Int = 0;
                                                                      val fresh$macro$130: Int = JSonImpl2.this.closeBracket.length;
                                                                      while$39(){
                                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                          {
                                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                            while$39()
                                                                          }
                                                                        else
                                                                          ()
                                                                      };
                                                                      while$38(){
                                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$131.<(fresh$macro$130)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.closeBracket).charAt(fresh$macro$131))))
                                                                          {
                                                                            {
                                                                              fresh$macro$131 = fresh$macro$131.+(1);
                                                                              inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                            };
                                                                            while$38()
                                                                          }
                                                                        else
                                                                          ()
                                                                      };
                                                                      if (fresh$macro$131.==(fresh$macro$130))
                                                                        {
                                                                          success = true;
                                                                          ()
                                                                        }
                                                                      else
                                                                        {
                                                                          success = false;
                                                                          ();
                                                                          inputpos$macro$2 = fresh$macro$132
                                                                        }
                                                                    }
                                                                  }
                                                                else
                                                                  ()
                                                              };
                                                              fresh$macro$133 = fresh$macro$111
                                                            };
                                                            if (success.unary_!)
                                                              {
                                                                inputpos$macro$2 = fresh$macro$108;
                                                                {
                                                                  val fresh$macro$134: fastparsers.framework.parseresult.ParseResult[Any,String] = fresh$macro$321.this.arr(input$macro$1, inputpos$macro$2);
                                                                  success = fresh$macro$134.success;
                                                                  if (success)
                                                                    {
                                                                      inputpos$macro$2 = fresh$macro$134.inputPos;
                                                                      fresh$macro$135 = fresh$macro$134.result
                                                                    }
                                                                  else
                                                                    error = fresh$macro$134.error
                                                                };
                                                                if (success)
                                                                  fresh$macro$107 = fresh$macro$135
                                                                else
                                                                  ()
                                                              }
                                                            else
                                                              fresh$macro$107 = fresh$macro$133
                                                          }
                                                        };
                                                        if (success.unary_!)
                                                          {
                                                            inputpos$macro$2 = fresh$macro$106;
                                                            {
                                                              val fresh$macro$137: Int = inputpos$macro$2;
                                                              {
                                                                while$41(){
                                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                    {
                                                                      inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                      while$41()
                                                                    }
                                                                  else
                                                                    ()
                                                                };
                                                                val fresh$macro$136: Int = inputpos$macro$2;
                                                                if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('\"')))
                                                                  {
                                                                    inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                    while$40(){
                                                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).!=('\"')))
                                                                        {
                                                                          {
                                                                            if (input$macro$1.apply(inputpos$macro$2).==('\\'))
                                                                              inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                            else
                                                                              ();
                                                                            inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                          };
                                                                          while$40()
                                                                        }
                                                                      else
                                                                        ()
                                                                    };
                                                                    if (inputpos$macro$2.<(inputsize$macro$3))
                                                                      {
                                                                        success = true;
                                                                        inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                        fresh$macro$138 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$136, inputpos$macro$2)
                                                                      }
                                                                    else
                                                                      {
                                                                        success = false;
                                                                        ();
                                                                        inputpos$macro$2 = fresh$macro$137
                                                                      }
                                                                  }
                                                                else
                                                                  {
                                                                    success = false;
                                                                    ();
                                                                    inputpos$macro$2 = fresh$macro$137
                                                                  }
                                                              }
                                                            };
                                                            if (success)
                                                              fresh$macro$105 = fresh$macro$138
                                                            else
                                                              ()
                                                          }
                                                        else
                                                          fresh$macro$105 = fresh$macro$107
                                                      }
                                                    };
                                                    if (success.unary_!)
                                                      {
                                                        inputpos$macro$2 = fresh$macro$104;
                                                        {
                                                          val fresh$macro$142: Int = inputpos$macro$2;
                                                          {
                                                            while$45(){
                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                {
                                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                  while$45()
                                                                }
                                                              else
                                                                ()
                                                            };
                                                            var fresh$macro$139: Boolean = false;
                                                            val fresh$macro$140: Int = inputpos$macro$2;
                                                            success = false;
                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('-')))
                                                              inputpos$macro$2 = inputpos$macro$2.+(1)
                                                            else
                                                              ();
                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                              {
                                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                while$44(){
                                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                                    {
                                                                      inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                      while$44()
                                                                    }
                                                                  else
                                                                    ()
                                                                };
                                                                if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('.')))
                                                                  {
                                                                    inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                    while$42(){
                                                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                                        {
                                                                          inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                          while$42()
                                                                        }
                                                                      else
                                                                        ()
                                                                    }
                                                                  }
                                                                else
                                                                  ();
                                                                success = true;
                                                                fresh$macro$141 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$140, inputpos$macro$2)
                                                              }
                                                            else
                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('.')))
                                                                {
                                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                                    {
                                                                      inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                      while$43(){
                                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                                          {
                                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                            while$43()
                                                                          }
                                                                        else
                                                                          ()
                                                                      };
                                                                      success = true;
                                                                      fresh$macro$141 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$140, inputpos$macro$2)
                                                                    }
                                                                  else
                                                                    ()
                                                                }
                                                              else
                                                                ()
                                                          }
                                                        };
                                                        if (success)
                                                          fresh$macro$103 = fresh$macro$141
                                                        else
                                                          ()
                                                      }
                                                    else
                                                      fresh$macro$103 = fresh$macro$105
                                                  }
                                                };
                                                if (success.unary_!)
                                                  {
                                                    inputpos$macro$2 = fresh$macro$102;
                                                    {
                                                      val fresh$macro$146: Int = inputpos$macro$2;
                                                      {
                                                        var fresh$macro$145: Int = 0;
                                                        val fresh$macro$144: Int = JSonImpl2.this.nullValue.length;
                                                        while$47(){
                                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                            {
                                                              inputpos$macro$2 = inputpos$macro$2.+(1);
                                                              while$47()
                                                            }
                                                          else
                                                            ()
                                                        };
                                                        while$46(){
                                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$145.<(fresh$macro$144)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.nullValue).charAt(fresh$macro$145))))
                                                            {
                                                              {
                                                                fresh$macro$145 = fresh$macro$145.+(1);
                                                                inputpos$macro$2 = inputpos$macro$2.+(1)
                                                              };
                                                              while$46()
                                                            }
                                                          else
                                                            ()
                                                        };
                                                        if (fresh$macro$145.==(fresh$macro$144))
                                                          {
                                                            success = true;
                                                            fresh$macro$147 = JSonImpl2.this.nullValue
                                                          }
                                                        else
                                                          {
                                                            success = false;
                                                            ();
                                                            inputpos$macro$2 = fresh$macro$146
                                                          }
                                                      }
                                                    };
                                                    if (success)
                                                      fresh$macro$101 = fresh$macro$147
                                                    else
                                                      ()
                                                  }
                                                else
                                                  fresh$macro$101 = fresh$macro$103
                                              }
                                            };
                                            if (success.unary_!)
                                              {
                                                inputpos$macro$2 = fresh$macro$100;
                                                {
                                                  val fresh$macro$151: Int = inputpos$macro$2;
                                                  {
                                                    var fresh$macro$150: Int = 0;
                                                    val fresh$macro$149: Int = JSonImpl2.this.trueValue.length;
                                                    while$49(){
                                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                        {
                                                          inputpos$macro$2 = inputpos$macro$2.+(1);
                                                          while$49()
                                                        }
                                                      else
                                                        ()
                                                    };
                                                    while$48(){
                                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$150.<(fresh$macro$149)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.trueValue).charAt(fresh$macro$150))))
                                                        {
                                                          {
                                                            fresh$macro$150 = fresh$macro$150.+(1);
                                                            inputpos$macro$2 = inputpos$macro$2.+(1)
                                                          };
                                                          while$48()
                                                        }
                                                      else
                                                        ()
                                                    };
                                                    if (fresh$macro$150.==(fresh$macro$149))
                                                      {
                                                        success = true;
                                                        fresh$macro$152 = JSonImpl2.this.trueValue
                                                      }
                                                    else
                                                      {
                                                        success = false;
                                                        ();
                                                        inputpos$macro$2 = fresh$macro$151
                                                      }
                                                  }
                                                };
                                                if (success)
                                                  fresh$macro$99 = fresh$macro$152
                                                else
                                                  ()
                                              }
                                            else
                                              fresh$macro$99 = fresh$macro$101
                                          }
                                        };
                                        if (success.unary_!)
                                          {
                                            inputpos$macro$2 = fresh$macro$98;
                                            {
                                              val fresh$macro$156: Int = inputpos$macro$2;
                                              {
                                                var fresh$macro$155: Int = 0;
                                                val fresh$macro$154: Int = JSonImpl2.this.falseValue.length;
                                                while$51(){
                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                    {
                                                      inputpos$macro$2 = inputpos$macro$2.+(1);
                                                      while$51()
                                                    }
                                                  else
                                                    ()
                                                };
                                                while$50(){
                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$155.<(fresh$macro$154)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.falseValue).charAt(fresh$macro$155))))
                                                    {
                                                      {
                                                        fresh$macro$155 = fresh$macro$155.+(1);
                                                        inputpos$macro$2 = inputpos$macro$2.+(1)
                                                      };
                                                      while$50()
                                                    }
                                                  else
                                                    ()
                                                };
                                                if (fresh$macro$155.==(fresh$macro$154))
                                                  {
                                                    success = true;
                                                    fresh$macro$157 = JSonImpl2.this.falseValue
                                                  }
                                                else
                                                  {
                                                    success = false;
                                                    ();
                                                    inputpos$macro$2 = fresh$macro$156
                                                  }
                                              }
                                            };
                                            if (success)
                                              fresh$macro$97 = fresh$macro$157
                                            else
                                              ()
                                          }
                                        else
                                          fresh$macro$97 = fresh$macro$99
                                      }
                                    }
                                  else
                                    ()
                                };
                                fresh$macro$158 = fresh$macro$97
                              };
                              if (success)
                                {
                                  fresh$macro$86.append(fresh$macro$158);
                                  {
                                    val fresh$macro$88: Int = inputpos$macro$2;
                                    {
                                      {
                                        val fresh$macro$92: Int = inputpos$macro$2;
                                        {
                                          var fresh$macro$91: Int = 0;
                                          val fresh$macro$90: Int = JSonImpl2.this.comma.length;
                                          while$29(){
                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                              {
                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                while$29()
                                              }
                                            else
                                              ()
                                          };
                                          while$28(){
                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$91.<(fresh$macro$90)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.comma).charAt(fresh$macro$91))))
                                              {
                                                {
                                                  fresh$macro$91 = fresh$macro$91.+(1);
                                                  inputpos$macro$2 = inputpos$macro$2.+(1)
                                                };
                                                while$28()
                                              }
                                            else
                                              ()
                                          };
                                          if (fresh$macro$91.==(fresh$macro$90))
                                            {
                                              success = true;
                                              fresh$macro$93 = JSonImpl2.this.comma
                                            }
                                          else
                                            {
                                              success = false;
                                              ();
                                              inputpos$macro$2 = fresh$macro$92
                                            }
                                        }
                                      };
                                      if (success.unary_!)
                                        {
                                          fresh$macro$85 = false;
                                          inputpos$macro$2 = fresh$macro$88
                                        }
                                      else
                                        ()
                                    }
                                  }
                                }
                              else
                                {
                                  fresh$macro$85 = false;
                                  inputpos$macro$2 = fresh$macro$94
                                }
                            }
                          };
                          while$52()
                        }
                      else
                        ()
                    };
                    {
                      fresh$macro$87 = fresh$macro$86.toList;
                      success = true
                    }
                  }
                else
                  ()
              };
              if (success)
                {
                  val fresh$macro$162: Int = inputpos$macro$2;
                  {
                    var fresh$macro$161: Int = 0;
                    val fresh$macro$160: Int = JSonImpl2.this.closeSBracket.length;
                    while$54(){
                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                        {
                          inputpos$macro$2 = inputpos$macro$2.+(1);
                          while$54()
                        }
                      else
                        ()
                    };
                    while$53(){
                      if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$161.<(fresh$macro$160)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.closeSBracket).charAt(fresh$macro$161))))
                        {
                          {
                            fresh$macro$161 = fresh$macro$161.+(1);
                            inputpos$macro$2 = inputpos$macro$2.+(1)
                          };
                          while$53()
                        }
                      else
                        ()
                    };
                    if (fresh$macro$161.==(fresh$macro$160))
                      {
                        success = true;
                        ()
                      }
                    else
                      {
                        success = false;
                        ();
                        inputpos$macro$2 = fresh$macro$162
                      }
                  }
                }
              else
                ()
            };
            fastparsers.framework.parseresult.ParseResult.apply[Any, String](success, error, if (success)
              fresh$macro$87
            else
              null, inputpos$macro$2)
          }
        }
      }
    };
    <synthetic> def arr$default$2: Int = 0;
    def value(input$macro$1: Array[Char], fresh$macro$163: Int = 0): fastparsers.framework.parseresult.ParseResult[Any,String] = {
      var error: String = " ";
      {
        var inputpos$macro$2: Int = fresh$macro$163;
        val inputsize$macro$3: Int = scala.this.Predef.charArrayOps(input$macro$1).size;
        {
          val inputpositioned$macro$4: fastparsers.tools.ToPosition.IndexedCharSeqToPosition[scala.collection.mutable.WrappedArray[Char]] = new fastparsers.tools.ToPosition.IndexedCharSeqToPosition[scala.collection.mutable.WrappedArray[Char]](scala.this.Predef.wrapCharArray(input$macro$1));
          {
            var success: Boolean = false;
            var fresh$macro$166: Any = null;
            var fresh$macro$168: Any = null;
            var fresh$macro$170: Any = null;
            var fresh$macro$172: Any = null;
            var fresh$macro$174: Any = null;
            var fresh$macro$176: Any = null;
            var fresh$macro$180: List[Any] = immutable.this.Nil;
            var fresh$macro$186: Array[Char] = null;
            var fresh$macro$190: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$196: Any = null;
            var fresh$macro$197: Any = null;
            var fresh$macro$202: Any = null;
            var fresh$macro$205: List[Any] = immutable.this.Nil;
            var fresh$macro$211: Array[Char] = null;
            var fresh$macro$214: Any = null;
            var fresh$macro$219: Any = null;
            var fresh$macro$222: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$225: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$231: Array[Char] = null;
            var fresh$macro$236: Array[Char] = null;
            var fresh$macro$241: Array[Char] = null;
            {
              {
                val fresh$macro$164: Int = inputpos$macro$2;
                while$55(){
                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                    {
                      inputpos$macro$2 = inputpos$macro$2.+(1);
                      while$55()
                    }
                  else
                    ()
                };
                ();
                success = true
              };
              if (success)
                {
                  val fresh$macro$167: Int = inputpos$macro$2;
                  {
                    {
                      val fresh$macro$169: Int = inputpos$macro$2;
                      {
                        {
                          val fresh$macro$171: Int = inputpos$macro$2;
                          {
                            {
                              val fresh$macro$173: Int = inputpos$macro$2;
                              {
                                {
                                  val fresh$macro$175: Int = inputpos$macro$2;
                                  {
                                    {
                                      val fresh$macro$177: Int = inputpos$macro$2;
                                      {
                                        {
                                          {
                                            {
                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('{')))
                                                {
                                                  ();
                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                  success = true
                                                }
                                              else
                                                {
                                                  success = false;
                                                  ()
                                                };
                                              if (success)
                                                {
                                                  var fresh$macro$178: Boolean = true;
                                                  val fresh$macro$179: scala.collection.mutable.ListBuffer[Any] = new scala.collection.mutable.ListBuffer[Any]();
                                                  while$62(){
                                                    if (fresh$macro$178)
                                                      {
                                                        {
                                                          val fresh$macro$187: Int = inputpos$macro$2;
                                                          {
                                                            {
                                                              {
                                                                {
                                                                  val fresh$macro$189: Int = inputpos$macro$2;
                                                                  {
                                                                    while$59(){
                                                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                        {
                                                                          inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                          while$59()
                                                                        }
                                                                      else
                                                                        ()
                                                                    };
                                                                    val fresh$macro$188: Int = inputpos$macro$2;
                                                                    if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('\"')))
                                                                      {
                                                                        inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                        while$58(){
                                                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).!=('\"')))
                                                                            {
                                                                              {
                                                                                if (input$macro$1.apply(inputpos$macro$2).==('\\'))
                                                                                  inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                else
                                                                                  ();
                                                                                inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                              };
                                                                              while$58()
                                                                            }
                                                                          else
                                                                            ()
                                                                        };
                                                                        if (inputpos$macro$2.<(inputsize$macro$3))
                                                                          {
                                                                            success = true;
                                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                            fresh$macro$190 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$188, inputpos$macro$2)
                                                                          }
                                                                        else
                                                                          {
                                                                            success = false;
                                                                            ();
                                                                            inputpos$macro$2 = fresh$macro$189
                                                                          }
                                                                      }
                                                                    else
                                                                      {
                                                                        success = false;
                                                                        ();
                                                                        inputpos$macro$2 = fresh$macro$189
                                                                      }
                                                                  }
                                                                };
                                                                if (success)
                                                                  {
                                                                    {
                                                                      val fresh$macro$194: Int = inputpos$macro$2;
                                                                      {
                                                                        var fresh$macro$193: Int = 0;
                                                                        val fresh$macro$192: Int = JSonImpl2.this.points.length;
                                                                        while$61(){
                                                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                            {
                                                                              inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                              while$61()
                                                                            }
                                                                          else
                                                                            ()
                                                                        };
                                                                        while$60(){
                                                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$193.<(fresh$macro$192)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.points).charAt(fresh$macro$193))))
                                                                            {
                                                                              {
                                                                                fresh$macro$193 = fresh$macro$193.+(1);
                                                                                inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                              };
                                                                              while$60()
                                                                            }
                                                                          else
                                                                            ()
                                                                        };
                                                                        if (fresh$macro$193.==(fresh$macro$192))
                                                                          {
                                                                            success = true;
                                                                            ()
                                                                          }
                                                                        else
                                                                          {
                                                                            success = false;
                                                                            ();
                                                                            inputpos$macro$2 = fresh$macro$194
                                                                          }
                                                                      }
                                                                    };
                                                                    if (success)
                                                                      {
                                                                        val fresh$macro$195: fastparsers.framework.parseresult.ParseResult[Any,String] = fresh$macro$321.this.value(input$macro$1, inputpos$macro$2);
                                                                        success = fresh$macro$195.success;
                                                                        if (success)
                                                                          {
                                                                            inputpos$macro$2 = fresh$macro$195.inputPos;
                                                                            fresh$macro$196 = fresh$macro$195.result
                                                                          }
                                                                        else
                                                                          error = fresh$macro$195.error
                                                                      }
                                                                    else
                                                                      ()
                                                                  }
                                                                else
                                                                  ()
                                                              };
                                                              fresh$macro$197 = scala.Tuple2.apply[fastparsers.input.InputWindow.CharArrayStruct, Any](fresh$macro$190, fresh$macro$196)
                                                            };
                                                            if (success)
                                                              {
                                                                fresh$macro$179.append(fresh$macro$197);
                                                                {
                                                                  val fresh$macro$181: Int = inputpos$macro$2;
                                                                  {
                                                                    {
                                                                      val fresh$macro$185: Int = inputpos$macro$2;
                                                                      {
                                                                        var fresh$macro$184: Int = 0;
                                                                        val fresh$macro$183: Int = JSonImpl2.this.comma.length;
                                                                        while$57(){
                                                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                            {
                                                                              inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                              while$57()
                                                                            }
                                                                          else
                                                                            ()
                                                                        };
                                                                        while$56(){
                                                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$184.<(fresh$macro$183)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.comma).charAt(fresh$macro$184))))
                                                                            {
                                                                              {
                                                                                fresh$macro$184 = fresh$macro$184.+(1);
                                                                                inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                              };
                                                                              while$56()
                                                                            }
                                                                          else
                                                                            ()
                                                                        };
                                                                        if (fresh$macro$184.==(fresh$macro$183))
                                                                          {
                                                                            success = true;
                                                                            fresh$macro$186 = JSonImpl2.this.comma
                                                                          }
                                                                        else
                                                                          {
                                                                            success = false;
                                                                            ();
                                                                            inputpos$macro$2 = fresh$macro$185
                                                                          }
                                                                      }
                                                                    };
                                                                    if (success.unary_!)
                                                                      {
                                                                        fresh$macro$178 = false;
                                                                        inputpos$macro$2 = fresh$macro$181
                                                                      }
                                                                    else
                                                                      ()
                                                                  }
                                                                }
                                                              }
                                                            else
                                                              {
                                                                fresh$macro$178 = false;
                                                                inputpos$macro$2 = fresh$macro$187
                                                              }
                                                          }
                                                        };
                                                        while$62()
                                                      }
                                                    else
                                                      ()
                                                  };
                                                  {
                                                    fresh$macro$180 = fresh$macro$179.toList;
                                                    success = true
                                                  }
                                                }
                                              else
                                                ()
                                            };
                                            if (success)
                                              {
                                                val fresh$macro$201: Int = inputpos$macro$2;
                                                {
                                                  var fresh$macro$200: Int = 0;
                                                  val fresh$macro$199: Int = JSonImpl2.this.closeBracket.length;
                                                  while$64(){
                                                    if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                      {
                                                        inputpos$macro$2 = inputpos$macro$2.+(1);
                                                        while$64()
                                                      }
                                                    else
                                                      ()
                                                  };
                                                  while$63(){
                                                    if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$200.<(fresh$macro$199)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.closeBracket).charAt(fresh$macro$200))))
                                                      {
                                                        {
                                                          fresh$macro$200 = fresh$macro$200.+(1);
                                                          inputpos$macro$2 = inputpos$macro$2.+(1)
                                                        };
                                                        while$63()
                                                      }
                                                    else
                                                      ()
                                                  };
                                                  if (fresh$macro$200.==(fresh$macro$199))
                                                    {
                                                      success = true;
                                                      ()
                                                    }
                                                  else
                                                    {
                                                      success = false;
                                                      ();
                                                      inputpos$macro$2 = fresh$macro$201
                                                    }
                                                }
                                              }
                                            else
                                              ()
                                          };
                                          fresh$macro$202 = fresh$macro$180
                                        };
                                        if (success.unary_!)
                                          {
                                            inputpos$macro$2 = fresh$macro$177;
                                            {
                                              {
                                                {
                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('[')))
                                                    {
                                                      ();
                                                      inputpos$macro$2 = inputpos$macro$2.+(1);
                                                      success = true
                                                    }
                                                  else
                                                    {
                                                      success = false;
                                                      ()
                                                    };
                                                  if (success)
                                                    {
                                                      var fresh$macro$203: Boolean = true;
                                                      val fresh$macro$204: scala.collection.mutable.ListBuffer[Any] = new scala.collection.mutable.ListBuffer[Any]();
                                                      while$67(){
                                                        if (fresh$macro$203)
                                                          {
                                                            {
                                                              val fresh$macro$212: Int = inputpos$macro$2;
                                                              {
                                                                {
                                                                  val fresh$macro$213: fastparsers.framework.parseresult.ParseResult[Any,String] = fresh$macro$321.this.value(input$macro$1, inputpos$macro$2);
                                                                  success = fresh$macro$213.success;
                                                                  if (success)
                                                                    {
                                                                      inputpos$macro$2 = fresh$macro$213.inputPos;
                                                                      fresh$macro$214 = fresh$macro$213.result
                                                                    }
                                                                  else
                                                                    error = fresh$macro$213.error
                                                                };
                                                                if (success)
                                                                  {
                                                                    fresh$macro$204.append(fresh$macro$214);
                                                                    {
                                                                      val fresh$macro$206: Int = inputpos$macro$2;
                                                                      {
                                                                        {
                                                                          val fresh$macro$210: Int = inputpos$macro$2;
                                                                          {
                                                                            var fresh$macro$209: Int = 0;
                                                                            val fresh$macro$208: Int = JSonImpl2.this.comma.length;
                                                                            while$66(){
                                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                                {
                                                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                  while$66()
                                                                                }
                                                                              else
                                                                                ()
                                                                            };
                                                                            while$65(){
                                                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$209.<(fresh$macro$208)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.comma).charAt(fresh$macro$209))))
                                                                                {
                                                                                  {
                                                                                    fresh$macro$209 = fresh$macro$209.+(1);
                                                                                    inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                  };
                                                                                  while$65()
                                                                                }
                                                                              else
                                                                                ()
                                                                            };
                                                                            if (fresh$macro$209.==(fresh$macro$208))
                                                                              {
                                                                                success = true;
                                                                                fresh$macro$211 = JSonImpl2.this.comma
                                                                              }
                                                                            else
                                                                              {
                                                                                success = false;
                                                                                ();
                                                                                inputpos$macro$2 = fresh$macro$210
                                                                              }
                                                                          }
                                                                        };
                                                                        if (success.unary_!)
                                                                          {
                                                                            fresh$macro$203 = false;
                                                                            inputpos$macro$2 = fresh$macro$206
                                                                          }
                                                                        else
                                                                          ()
                                                                      }
                                                                    }
                                                                  }
                                                                else
                                                                  {
                                                                    fresh$macro$203 = false;
                                                                    inputpos$macro$2 = fresh$macro$212
                                                                  }
                                                              }
                                                            };
                                                            while$67()
                                                          }
                                                        else
                                                          ()
                                                      };
                                                      {
                                                        fresh$macro$205 = fresh$macro$204.toList;
                                                        success = true
                                                      }
                                                    }
                                                  else
                                                    ()
                                                };
                                                if (success)
                                                  {
                                                    val fresh$macro$218: Int = inputpos$macro$2;
                                                    {
                                                      var fresh$macro$217: Int = 0;
                                                      val fresh$macro$216: Int = JSonImpl2.this.closeSBracket.length;
                                                      while$69(){
                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                          {
                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                            while$69()
                                                          }
                                                        else
                                                          ()
                                                      };
                                                      while$68(){
                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$217.<(fresh$macro$216)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.closeSBracket).charAt(fresh$macro$217))))
                                                          {
                                                            {
                                                              fresh$macro$217 = fresh$macro$217.+(1);
                                                              inputpos$macro$2 = inputpos$macro$2.+(1)
                                                            };
                                                            while$68()
                                                          }
                                                        else
                                                          ()
                                                      };
                                                      if (fresh$macro$217.==(fresh$macro$216))
                                                        {
                                                          success = true;
                                                          ()
                                                        }
                                                      else
                                                        {
                                                          success = false;
                                                          ();
                                                          inputpos$macro$2 = fresh$macro$218
                                                        }
                                                    }
                                                  }
                                                else
                                                  ()
                                              };
                                              fresh$macro$219 = fresh$macro$205
                                            };
                                            if (success)
                                              fresh$macro$176 = fresh$macro$219
                                            else
                                              ()
                                          }
                                        else
                                          fresh$macro$176 = fresh$macro$202
                                      }
                                    };
                                    if (success.unary_!)
                                      {
                                        inputpos$macro$2 = fresh$macro$175;
                                        {
                                          val fresh$macro$221: Int = inputpos$macro$2;
                                          {
                                            while$71(){
                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                {
                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                  while$71()
                                                }
                                              else
                                                ()
                                            };
                                            val fresh$macro$220: Int = inputpos$macro$2;
                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('\"')))
                                              {
                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                while$70(){
                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).!=('\"')))
                                                    {
                                                      {
                                                        if (input$macro$1.apply(inputpos$macro$2).==('\\'))
                                                          inputpos$macro$2 = inputpos$macro$2.+(1)
                                                        else
                                                          ();
                                                        inputpos$macro$2 = inputpos$macro$2.+(1)
                                                      };
                                                      while$70()
                                                    }
                                                  else
                                                    ()
                                                };
                                                if (inputpos$macro$2.<(inputsize$macro$3))
                                                  {
                                                    success = true;
                                                    inputpos$macro$2 = inputpos$macro$2.+(1);
                                                    fresh$macro$222 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$220, inputpos$macro$2)
                                                  }
                                                else
                                                  {
                                                    success = false;
                                                    ();
                                                    inputpos$macro$2 = fresh$macro$221
                                                  }
                                              }
                                            else
                                              {
                                                success = false;
                                                ();
                                                inputpos$macro$2 = fresh$macro$221
                                              }
                                          }
                                        };
                                        if (success)
                                          fresh$macro$174 = fresh$macro$222
                                        else
                                          ()
                                      }
                                    else
                                      fresh$macro$174 = fresh$macro$176
                                  }
                                };
                                if (success.unary_!)
                                  {
                                    inputpos$macro$2 = fresh$macro$173;
                                    {
                                      val fresh$macro$226: Int = inputpos$macro$2;
                                      {
                                        while$75(){
                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                            {
                                              inputpos$macro$2 = inputpos$macro$2.+(1);
                                              while$75()
                                            }
                                          else
                                            ()
                                        };
                                        var fresh$macro$223: Boolean = false;
                                        val fresh$macro$224: Int = inputpos$macro$2;
                                        success = false;
                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('-')))
                                          inputpos$macro$2 = inputpos$macro$2.+(1)
                                        else
                                          ();
                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                          {
                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                            while$74(){
                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                {
                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                  while$74()
                                                }
                                              else
                                                ()
                                            };
                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('.')))
                                              {
                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                while$72(){
                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                    {
                                                      inputpos$macro$2 = inputpos$macro$2.+(1);
                                                      while$72()
                                                    }
                                                  else
                                                    ()
                                                }
                                              }
                                            else
                                              ();
                                            success = true;
                                            fresh$macro$225 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$224, inputpos$macro$2)
                                          }
                                        else
                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('.')))
                                            {
                                              inputpos$macro$2 = inputpos$macro$2.+(1);
                                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                {
                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                  while$73(){
                                                    if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                      {
                                                        inputpos$macro$2 = inputpos$macro$2.+(1);
                                                        while$73()
                                                      }
                                                    else
                                                      ()
                                                  };
                                                  success = true;
                                                  fresh$macro$225 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$224, inputpos$macro$2)
                                                }
                                              else
                                                ()
                                            }
                                          else
                                            ()
                                      }
                                    };
                                    if (success)
                                      fresh$macro$172 = fresh$macro$225
                                    else
                                      ()
                                  }
                                else
                                  fresh$macro$172 = fresh$macro$174
                              }
                            };
                            if (success.unary_!)
                              {
                                inputpos$macro$2 = fresh$macro$171;
                                {
                                  val fresh$macro$230: Int = inputpos$macro$2;
                                  {
                                    var fresh$macro$229: Int = 0;
                                    val fresh$macro$228: Int = JSonImpl2.this.nullValue.length;
                                    while$77(){
                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                        {
                                          inputpos$macro$2 = inputpos$macro$2.+(1);
                                          while$77()
                                        }
                                      else
                                        ()
                                    };
                                    while$76(){
                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$229.<(fresh$macro$228)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.nullValue).charAt(fresh$macro$229))))
                                        {
                                          {
                                            fresh$macro$229 = fresh$macro$229.+(1);
                                            inputpos$macro$2 = inputpos$macro$2.+(1)
                                          };
                                          while$76()
                                        }
                                      else
                                        ()
                                    };
                                    if (fresh$macro$229.==(fresh$macro$228))
                                      {
                                        success = true;
                                        fresh$macro$231 = JSonImpl2.this.nullValue
                                      }
                                    else
                                      {
                                        success = false;
                                        ();
                                        inputpos$macro$2 = fresh$macro$230
                                      }
                                  }
                                };
                                if (success)
                                  fresh$macro$170 = fresh$macro$231
                                else
                                  ()
                              }
                            else
                              fresh$macro$170 = fresh$macro$172
                          }
                        };
                        if (success.unary_!)
                          {
                            inputpos$macro$2 = fresh$macro$169;
                            {
                              val fresh$macro$235: Int = inputpos$macro$2;
                              {
                                var fresh$macro$234: Int = 0;
                                val fresh$macro$233: Int = JSonImpl2.this.trueValue.length;
                                while$79(){
                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                    {
                                      inputpos$macro$2 = inputpos$macro$2.+(1);
                                      while$79()
                                    }
                                  else
                                    ()
                                };
                                while$78(){
                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$234.<(fresh$macro$233)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.trueValue).charAt(fresh$macro$234))))
                                    {
                                      {
                                        fresh$macro$234 = fresh$macro$234.+(1);
                                        inputpos$macro$2 = inputpos$macro$2.+(1)
                                      };
                                      while$78()
                                    }
                                  else
                                    ()
                                };
                                if (fresh$macro$234.==(fresh$macro$233))
                                  {
                                    success = true;
                                    fresh$macro$236 = JSonImpl2.this.trueValue
                                  }
                                else
                                  {
                                    success = false;
                                    ();
                                    inputpos$macro$2 = fresh$macro$235
                                  }
                              }
                            };
                            if (success)
                              fresh$macro$168 = fresh$macro$236
                            else
                              ()
                          }
                        else
                          fresh$macro$168 = fresh$macro$170
                      }
                    };
                    if (success.unary_!)
                      {
                        inputpos$macro$2 = fresh$macro$167;
                        {
                          val fresh$macro$240: Int = inputpos$macro$2;
                          {
                            var fresh$macro$239: Int = 0;
                            val fresh$macro$238: Int = JSonImpl2.this.falseValue.length;
                            while$81(){
                              if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                {
                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                  while$81()
                                }
                              else
                                ()
                            };
                            while$80(){
                              if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$239.<(fresh$macro$238)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.falseValue).charAt(fresh$macro$239))))
                                {
                                  {
                                    fresh$macro$239 = fresh$macro$239.+(1);
                                    inputpos$macro$2 = inputpos$macro$2.+(1)
                                  };
                                  while$80()
                                }
                              else
                                ()
                            };
                            if (fresh$macro$239.==(fresh$macro$238))
                              {
                                success = true;
                                fresh$macro$241 = JSonImpl2.this.falseValue
                              }
                            else
                              {
                                success = false;
                                ();
                                inputpos$macro$2 = fresh$macro$240
                              }
                          }
                        };
                        if (success)
                          fresh$macro$166 = fresh$macro$241
                        else
                          ()
                      }
                    else
                      fresh$macro$166 = fresh$macro$168
                  }
                }
              else
                ()
            };
            fastparsers.framework.parseresult.ParseResult.apply[Any, String](success, error, if (success)
              fresh$macro$166
            else
              null, inputpos$macro$2)
          }
        }
      }
    };
    <synthetic> def value$default$2: Int = 0;
    def obj(input$macro$1: Array[Char], fresh$macro$242: Int = 0): fastparsers.framework.parseresult.ParseResult[Any,String] = {
      var error: String = " ";
      {
        var inputpos$macro$2: Int = fresh$macro$242;
        val inputsize$macro$3: Int = scala.this.Predef.charArrayOps(input$macro$1).size;
        {
          val inputpositioned$macro$4: fastparsers.tools.ToPosition.IndexedCharSeqToPosition[scala.collection.mutable.WrappedArray[Char]] = new fastparsers.tools.ToPosition.IndexedCharSeqToPosition[scala.collection.mutable.WrappedArray[Char]](scala.this.Predef.wrapCharArray(input$macro$1));
          {
            var success: Boolean = false;
            var fresh$macro$245: List[Any] = immutable.this.Nil;
            var fresh$macro$251: Array[Char] = null;
            var fresh$macro$255: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$262: Any = null;
            var fresh$macro$264: Any = null;
            var fresh$macro$266: Any = null;
            var fresh$macro$268: Any = null;
            var fresh$macro$270: Any = null;
            var fresh$macro$272: Any = null;
            var fresh$macro$275: Any = null;
            var fresh$macro$278: List[Any] = immutable.this.Nil;
            var fresh$macro$284: Array[Char] = null;
            var fresh$macro$287: Any = null;
            var fresh$macro$292: Any = null;
            var fresh$macro$295: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$298: fastparsers.input.InputWindow.CharArrayStruct = null;
            var fresh$macro$304: Array[Char] = null;
            var fresh$macro$309: Array[Char] = null;
            var fresh$macro$314: Array[Char] = null;
            var fresh$macro$315: Any = null;
            var fresh$macro$316: Any = null;
            {
              {
                if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('{')))
                  {
                    ();
                    inputpos$macro$2 = inputpos$macro$2.+(1);
                    success = true
                  }
                else
                  {
                    success = false;
                    ()
                  };
                if (success)
                  {
                    var fresh$macro$243: Boolean = true;
                    val fresh$macro$244: scala.collection.mutable.ListBuffer[Any] = new scala.collection.mutable.ListBuffer[Any]();
                    while$106(){
                      if (fresh$macro$243)
                        {
                          {
                            val fresh$macro$252: Int = inputpos$macro$2;
                            {
                              {
                                {
                                  {
                                    val fresh$macro$254: Int = inputpos$macro$2;
                                    {
                                      while$85(){
                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                          {
                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                            while$85()
                                          }
                                        else
                                          ()
                                      };
                                      val fresh$macro$253: Int = inputpos$macro$2;
                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('\"')))
                                        {
                                          inputpos$macro$2 = inputpos$macro$2.+(1);
                                          while$84(){
                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).!=('\"')))
                                              {
                                                {
                                                  if (input$macro$1.apply(inputpos$macro$2).==('\\'))
                                                    inputpos$macro$2 = inputpos$macro$2.+(1)
                                                  else
                                                    ();
                                                  inputpos$macro$2 = inputpos$macro$2.+(1)
                                                };
                                                while$84()
                                              }
                                            else
                                              ()
                                          };
                                          if (inputpos$macro$2.<(inputsize$macro$3))
                                            {
                                              success = true;
                                              inputpos$macro$2 = inputpos$macro$2.+(1);
                                              fresh$macro$255 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$253, inputpos$macro$2)
                                            }
                                          else
                                            {
                                              success = false;
                                              ();
                                              inputpos$macro$2 = fresh$macro$254
                                            }
                                        }
                                      else
                                        {
                                          success = false;
                                          ();
                                          inputpos$macro$2 = fresh$macro$254
                                        }
                                    }
                                  };
                                  if (success)
                                    {
                                      {
                                        val fresh$macro$259: Int = inputpos$macro$2;
                                        {
                                          var fresh$macro$258: Int = 0;
                                          val fresh$macro$257: Int = JSonImpl2.this.points.length;
                                          while$87(){
                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                              {
                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                while$87()
                                              }
                                            else
                                              ()
                                          };
                                          while$86(){
                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$258.<(fresh$macro$257)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.points).charAt(fresh$macro$258))))
                                              {
                                                {
                                                  fresh$macro$258 = fresh$macro$258.+(1);
                                                  inputpos$macro$2 = inputpos$macro$2.+(1)
                                                };
                                                while$86()
                                              }
                                            else
                                              ()
                                          };
                                          if (fresh$macro$258.==(fresh$macro$257))
                                            {
                                              success = true;
                                              ()
                                            }
                                          else
                                            {
                                              success = false;
                                              ();
                                              inputpos$macro$2 = fresh$macro$259
                                            }
                                        }
                                      };
                                      if (success)
                                        {
                                          {
                                            {
                                              val fresh$macro$260: Int = inputpos$macro$2;
                                              while$88(){
                                                if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                  {
                                                    inputpos$macro$2 = inputpos$macro$2.+(1);
                                                    while$88()
                                                  }
                                                else
                                                  ()
                                              };
                                              ();
                                              success = true
                                            };
                                            if (success)
                                              {
                                                val fresh$macro$263: Int = inputpos$macro$2;
                                                {
                                                  {
                                                    val fresh$macro$265: Int = inputpos$macro$2;
                                                    {
                                                      {
                                                        val fresh$macro$267: Int = inputpos$macro$2;
                                                        {
                                                          {
                                                            val fresh$macro$269: Int = inputpos$macro$2;
                                                            {
                                                              {
                                                                val fresh$macro$271: Int = inputpos$macro$2;
                                                                {
                                                                  {
                                                                    val fresh$macro$273: Int = inputpos$macro$2;
                                                                    {
                                                                      {
                                                                        val fresh$macro$274: fastparsers.framework.parseresult.ParseResult[Any,String] = fresh$macro$321.this.obj(input$macro$1, inputpos$macro$2);
                                                                        success = fresh$macro$274.success;
                                                                        if (success)
                                                                          {
                                                                            inputpos$macro$2 = fresh$macro$274.inputPos;
                                                                            fresh$macro$275 = fresh$macro$274.result
                                                                          }
                                                                        else
                                                                          error = fresh$macro$274.error
                                                                      };
                                                                      if (success.unary_!)
                                                                        {
                                                                          inputpos$macro$2 = fresh$macro$273;
                                                                          {
                                                                            {
                                                                              {
                                                                                if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('[')))
                                                                                  {
                                                                                    ();
                                                                                    inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                    success = true
                                                                                  }
                                                                                else
                                                                                  {
                                                                                    success = false;
                                                                                    ()
                                                                                  };
                                                                                if (success)
                                                                                  {
                                                                                    var fresh$macro$276: Boolean = true;
                                                                                    val fresh$macro$277: scala.collection.mutable.ListBuffer[Any] = new scala.collection.mutable.ListBuffer[Any]();
                                                                                    while$91(){
                                                                                      if (fresh$macro$276)
                                                                                        {
                                                                                          {
                                                                                            val fresh$macro$285: Int = inputpos$macro$2;
                                                                                            {
                                                                                              {
                                                                                                val fresh$macro$286: fastparsers.framework.parseresult.ParseResult[Any,String] = fresh$macro$321.this.value(input$macro$1, inputpos$macro$2);
                                                                                                success = fresh$macro$286.success;
                                                                                                if (success)
                                                                                                  {
                                                                                                    inputpos$macro$2 = fresh$macro$286.inputPos;
                                                                                                    fresh$macro$287 = fresh$macro$286.result
                                                                                                  }
                                                                                                else
                                                                                                  error = fresh$macro$286.error
                                                                                              };
                                                                                              if (success)
                                                                                                {
                                                                                                  fresh$macro$277.append(fresh$macro$287);
                                                                                                  {
                                                                                                    val fresh$macro$279: Int = inputpos$macro$2;
                                                                                                    {
                                                                                                      {
                                                                                                        val fresh$macro$283: Int = inputpos$macro$2;
                                                                                                        {
                                                                                                          var fresh$macro$282: Int = 0;
                                                                                                          val fresh$macro$281: Int = JSonImpl2.this.comma.length;
                                                                                                          while$90(){
                                                                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                                                              {
                                                                                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                                                while$90()
                                                                                                              }
                                                                                                            else
                                                                                                              ()
                                                                                                          };
                                                                                                          while$89(){
                                                                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$282.<(fresh$macro$281)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.comma).charAt(fresh$macro$282))))
                                                                                                              {
                                                                                                                {
                                                                                                                  fresh$macro$282 = fresh$macro$282.+(1);
                                                                                                                  inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                                                };
                                                                                                                while$89()
                                                                                                              }
                                                                                                            else
                                                                                                              ()
                                                                                                          };
                                                                                                          if (fresh$macro$282.==(fresh$macro$281))
                                                                                                            {
                                                                                                              success = true;
                                                                                                              fresh$macro$284 = JSonImpl2.this.comma
                                                                                                            }
                                                                                                          else
                                                                                                            {
                                                                                                              success = false;
                                                                                                              ();
                                                                                                              inputpos$macro$2 = fresh$macro$283
                                                                                                            }
                                                                                                        }
                                                                                                      };
                                                                                                      if (success.unary_!)
                                                                                                        {
                                                                                                          fresh$macro$276 = false;
                                                                                                          inputpos$macro$2 = fresh$macro$279
                                                                                                        }
                                                                                                      else
                                                                                                        ()
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              else
                                                                                                {
                                                                                                  fresh$macro$276 = false;
                                                                                                  inputpos$macro$2 = fresh$macro$285
                                                                                                }
                                                                                            }
                                                                                          };
                                                                                          while$91()
                                                                                        }
                                                                                      else
                                                                                        ()
                                                                                    };
                                                                                    {
                                                                                      fresh$macro$278 = fresh$macro$277.toList;
                                                                                      success = true
                                                                                    }
                                                                                  }
                                                                                else
                                                                                  ()
                                                                              };
                                                                              if (success)
                                                                                {
                                                                                  val fresh$macro$291: Int = inputpos$macro$2;
                                                                                  {
                                                                                    var fresh$macro$290: Int = 0;
                                                                                    val fresh$macro$289: Int = JSonImpl2.this.closeSBracket.length;
                                                                                    while$93(){
                                                                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                                        {
                                                                                          inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                          while$93()
                                                                                        }
                                                                                      else
                                                                                        ()
                                                                                    };
                                                                                    while$92(){
                                                                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$290.<(fresh$macro$289)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.closeSBracket).charAt(fresh$macro$290))))
                                                                                        {
                                                                                          {
                                                                                            fresh$macro$290 = fresh$macro$290.+(1);
                                                                                            inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                          };
                                                                                          while$92()
                                                                                        }
                                                                                      else
                                                                                        ()
                                                                                    };
                                                                                    if (fresh$macro$290.==(fresh$macro$289))
                                                                                      {
                                                                                        success = true;
                                                                                        ()
                                                                                      }
                                                                                    else
                                                                                      {
                                                                                        success = false;
                                                                                        ();
                                                                                        inputpos$macro$2 = fresh$macro$291
                                                                                      }
                                                                                  }
                                                                                }
                                                                              else
                                                                                ()
                                                                            };
                                                                            fresh$macro$292 = fresh$macro$278
                                                                          };
                                                                          if (success)
                                                                            fresh$macro$272 = fresh$macro$292
                                                                          else
                                                                            ()
                                                                        }
                                                                      else
                                                                        fresh$macro$272 = fresh$macro$275
                                                                    }
                                                                  };
                                                                  if (success.unary_!)
                                                                    {
                                                                      inputpos$macro$2 = fresh$macro$271;
                                                                      {
                                                                        val fresh$macro$294: Int = inputpos$macro$2;
                                                                        {
                                                                          while$95(){
                                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                              {
                                                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                while$95()
                                                                              }
                                                                            else
                                                                              ()
                                                                          };
                                                                          val fresh$macro$293: Int = inputpos$macro$2;
                                                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('\"')))
                                                                            {
                                                                              inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                              while$94(){
                                                                                if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).!=('\"')))
                                                                                  {
                                                                                    {
                                                                                      if (input$macro$1.apply(inputpos$macro$2).==('\\'))
                                                                                        inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                      else
                                                                                        ();
                                                                                      inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                                    };
                                                                                    while$94()
                                                                                  }
                                                                                else
                                                                                  ()
                                                                              };
                                                                              if (inputpos$macro$2.<(inputsize$macro$3))
                                                                                {
                                                                                  success = true;
                                                                                  inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                  fresh$macro$295 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$293, inputpos$macro$2)
                                                                                }
                                                                              else
                                                                                {
                                                                                  success = false;
                                                                                  ();
                                                                                  inputpos$macro$2 = fresh$macro$294
                                                                                }
                                                                            }
                                                                          else
                                                                            {
                                                                              success = false;
                                                                              ();
                                                                              inputpos$macro$2 = fresh$macro$294
                                                                            }
                                                                        }
                                                                      };
                                                                      if (success)
                                                                        fresh$macro$270 = fresh$macro$295
                                                                      else
                                                                        ()
                                                                    }
                                                                  else
                                                                    fresh$macro$270 = fresh$macro$272
                                                                }
                                                              };
                                                              if (success.unary_!)
                                                                {
                                                                  inputpos$macro$2 = fresh$macro$269;
                                                                  {
                                                                    val fresh$macro$299: Int = inputpos$macro$2;
                                                                    {
                                                                      while$99(){
                                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                          {
                                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                            while$99()
                                                                          }
                                                                        else
                                                                          ()
                                                                      };
                                                                      var fresh$macro$296: Boolean = false;
                                                                      val fresh$macro$297: Int = inputpos$macro$2;
                                                                      success = false;
                                                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('-')))
                                                                        inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                      else
                                                                        ();
                                                                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                                        {
                                                                          inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                          while$98(){
                                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                                              {
                                                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                while$98()
                                                                              }
                                                                            else
                                                                              ()
                                                                          };
                                                                          if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('.')))
                                                                            {
                                                                              inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                              while$96(){
                                                                                if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                                                  {
                                                                                    inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                    while$96()
                                                                                  }
                                                                                else
                                                                                  ()
                                                                              }
                                                                            }
                                                                          else
                                                                            ();
                                                                          success = true;
                                                                          fresh$macro$298 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$297, inputpos$macro$2)
                                                                        }
                                                                      else
                                                                        if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==('.')))
                                                                          {
                                                                            inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                                              {
                                                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                while$97(){
                                                                                  if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).>=('0')).&&(input$macro$1.apply(inputpos$macro$2).<=('9')))
                                                                                    {
                                                                                      inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                                      while$97()
                                                                                    }
                                                                                  else
                                                                                    ()
                                                                                };
                                                                                success = true;
                                                                                fresh$macro$298 = new fastparsers.input.InputWindow.CharArrayStruct(input$macro$1, fresh$macro$297, inputpos$macro$2)
                                                                              }
                                                                            else
                                                                              ()
                                                                          }
                                                                        else
                                                                          ()
                                                                    }
                                                                  };
                                                                  if (success)
                                                                    fresh$macro$268 = fresh$macro$298
                                                                  else
                                                                    ()
                                                                }
                                                              else
                                                                fresh$macro$268 = fresh$macro$270
                                                            }
                                                          };
                                                          if (success.unary_!)
                                                            {
                                                              inputpos$macro$2 = fresh$macro$267;
                                                              {
                                                                val fresh$macro$303: Int = inputpos$macro$2;
                                                                {
                                                                  var fresh$macro$302: Int = 0;
                                                                  val fresh$macro$301: Int = JSonImpl2.this.nullValue.length;
                                                                  while$101(){
                                                                    if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                      {
                                                                        inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                        while$101()
                                                                      }
                                                                    else
                                                                      ()
                                                                  };
                                                                  while$100(){
                                                                    if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$302.<(fresh$macro$301)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.nullValue).charAt(fresh$macro$302))))
                                                                      {
                                                                        {
                                                                          fresh$macro$302 = fresh$macro$302.+(1);
                                                                          inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                        };
                                                                        while$100()
                                                                      }
                                                                    else
                                                                      ()
                                                                  };
                                                                  if (fresh$macro$302.==(fresh$macro$301))
                                                                    {
                                                                      success = true;
                                                                      fresh$macro$304 = JSonImpl2.this.nullValue
                                                                    }
                                                                  else
                                                                    {
                                                                      success = false;
                                                                      ();
                                                                      inputpos$macro$2 = fresh$macro$303
                                                                    }
                                                                }
                                                              };
                                                              if (success)
                                                                fresh$macro$266 = fresh$macro$304
                                                              else
                                                                ()
                                                            }
                                                          else
                                                            fresh$macro$266 = fresh$macro$268
                                                        }
                                                      };
                                                      if (success.unary_!)
                                                        {
                                                          inputpos$macro$2 = fresh$macro$265;
                                                          {
                                                            val fresh$macro$308: Int = inputpos$macro$2;
                                                            {
                                                              var fresh$macro$307: Int = 0;
                                                              val fresh$macro$306: Int = JSonImpl2.this.trueValue.length;
                                                              while$103(){
                                                                if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                                  {
                                                                    inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                    while$103()
                                                                  }
                                                                else
                                                                  ()
                                                              };
                                                              while$102(){
                                                                if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$307.<(fresh$macro$306)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.trueValue).charAt(fresh$macro$307))))
                                                                  {
                                                                    {
                                                                      fresh$macro$307 = fresh$macro$307.+(1);
                                                                      inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                    };
                                                                    while$102()
                                                                  }
                                                                else
                                                                  ()
                                                              };
                                                              if (fresh$macro$307.==(fresh$macro$306))
                                                                {
                                                                  success = true;
                                                                  fresh$macro$309 = JSonImpl2.this.trueValue
                                                                }
                                                              else
                                                                {
                                                                  success = false;
                                                                  ();
                                                                  inputpos$macro$2 = fresh$macro$308
                                                                }
                                                            }
                                                          };
                                                          if (success)
                                                            fresh$macro$264 = fresh$macro$309
                                                          else
                                                            ()
                                                        }
                                                      else
                                                        fresh$macro$264 = fresh$macro$266
                                                    }
                                                  };
                                                  if (success.unary_!)
                                                    {
                                                      inputpos$macro$2 = fresh$macro$263;
                                                      {
                                                        val fresh$macro$313: Int = inputpos$macro$2;
                                                        {
                                                          var fresh$macro$312: Int = 0;
                                                          val fresh$macro$311: Int = JSonImpl2.this.falseValue.length;
                                                          while$105(){
                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                                              {
                                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                                while$105()
                                                              }
                                                            else
                                                              ()
                                                          };
                                                          while$104(){
                                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$312.<(fresh$macro$311)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.falseValue).charAt(fresh$macro$312))))
                                                              {
                                                                {
                                                                  fresh$macro$312 = fresh$macro$312.+(1);
                                                                  inputpos$macro$2 = inputpos$macro$2.+(1)
                                                                };
                                                                while$104()
                                                              }
                                                            else
                                                              ()
                                                          };
                                                          if (fresh$macro$312.==(fresh$macro$311))
                                                            {
                                                              success = true;
                                                              fresh$macro$314 = JSonImpl2.this.falseValue
                                                            }
                                                          else
                                                            {
                                                              success = false;
                                                              ();
                                                              inputpos$macro$2 = fresh$macro$313
                                                            }
                                                        }
                                                      };
                                                      if (success)
                                                        fresh$macro$262 = fresh$macro$314
                                                      else
                                                        ()
                                                    }
                                                  else
                                                    fresh$macro$262 = fresh$macro$264
                                                }
                                              }
                                            else
                                              ()
                                          };
                                          fresh$macro$315 = fresh$macro$262
                                        }
                                      else
                                        ()
                                    }
                                  else
                                    ()
                                };
                                fresh$macro$316 = scala.Tuple2.apply[fastparsers.input.InputWindow.CharArrayStruct, Any](fresh$macro$255, fresh$macro$315)
                              };
                              if (success)
                                {
                                  fresh$macro$244.append(fresh$macro$316);
                                  {
                                    val fresh$macro$246: Int = inputpos$macro$2;
                                    {
                                      {
                                        val fresh$macro$250: Int = inputpos$macro$2;
                                        {
                                          var fresh$macro$249: Int = 0;
                                          val fresh$macro$248: Int = JSonImpl2.this.comma.length;
                                          while$83(){
                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                                              {
                                                inputpos$macro$2 = inputpos$macro$2.+(1);
                                                while$83()
                                              }
                                            else
                                              ()
                                          };
                                          while$82(){
                                            if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$249.<(fresh$macro$248)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.comma).charAt(fresh$macro$249))))
                                              {
                                                {
                                                  fresh$macro$249 = fresh$macro$249.+(1);
                                                  inputpos$macro$2 = inputpos$macro$2.+(1)
                                                };
                                                while$82()
                                              }
                                            else
                                              ()
                                          };
                                          if (fresh$macro$249.==(fresh$macro$248))
                                            {
                                              success = true;
                                              fresh$macro$251 = JSonImpl2.this.comma
                                            }
                                          else
                                            {
                                              success = false;
                                              ();
                                              inputpos$macro$2 = fresh$macro$250
                                            }
                                        }
                                      };
                                      if (success.unary_!)
                                        {
                                          fresh$macro$243 = false;
                                          inputpos$macro$2 = fresh$macro$246
                                        }
                                      else
                                        ()
                                    }
                                  }
                                }
                              else
                                {
                                  fresh$macro$243 = false;
                                  inputpos$macro$2 = fresh$macro$252
                                }
                            }
                          };
                          while$106()
                        }
                      else
                        ()
                    };
                    {
                      fresh$macro$245 = fresh$macro$244.toList;
                      success = true
                    }
                  }
                else
                  ()
              };
              if (success)
                {
                  val fresh$macro$320: Int = inputpos$macro$2;
                  {
                    var fresh$macro$319: Int = 0;
                    val fresh$macro$318: Int = JSonImpl2.this.closeBracket.length;
                    while$108(){
                      if (inputpos$macro$2.<(inputsize$macro$3).&&(input$macro$1.apply(inputpos$macro$2).==(' ').||(input$macro$1.apply(inputpos$macro$2).==('\t')).||(input$macro$1.apply(inputpos$macro$2).==('\n')).||(input$macro$1.apply(inputpos$macro$2).==('\r'))))
                        {
                          inputpos$macro$2 = inputpos$macro$2.+(1);
                          while$108()
                        }
                      else
                        ()
                    };
                    while$107(){
                      if (inputpos$macro$2.<(inputsize$macro$3).&&(fresh$macro$319.<(fresh$macro$318)).&&(input$macro$1.apply(inputpos$macro$2).==(scala.this.Predef.ArrayCharSequence(JSonImpl2.this.closeBracket).charAt(fresh$macro$319))))
                        {
                          {
                            fresh$macro$319 = fresh$macro$319.+(1);
                            inputpos$macro$2 = inputpos$macro$2.+(1)
                          };
                          while$107()
                        }
                      else
                        ()
                    };
                    if (fresh$macro$319.==(fresh$macro$318))
                      {
                        success = true;
                        ()
                      }
                    else
                      {
                        success = false;
                        ();
                        inputpos$macro$2 = fresh$macro$320
                      }
                  }
                }
              else
                ()
            };
            fastparsers.framework.parseresult.ParseResult.apply[Any, String](success, error, if (success)
              fresh$macro$245
            else
              null, inputpos$macro$2)
          }
        }
      }
    };
    <synthetic> def obj$default$2: Int = 0
  };
  val fresh$macro$322: Int = 0;
  new fresh$macro$321()
}
